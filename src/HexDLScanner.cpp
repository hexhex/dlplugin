#line 2 "HexDLScanner.cpp"

#line 4 "HexDLScanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyDLFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *yyDLalloc (yy_size_t  );
void *yyDLrealloc (void *,yy_size_t  );
void yyDLfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int HexDLFlexLexer::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 22
#define YY_END_OF_BUFFER 23
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[335] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,   23,   21,
       21,   20,   21,   21,   21,   21,   19,   19,   21,   21,
        8,   21,    8,   10,   21,    9,   12,   21,   18,   17,
       21,   16,   15,   13,   14,    0,    0,   20,    0,    1,
        0,    0,    0,   19,    0,    9,    0,   11,   10,    9,
        0,    9,    9,    0,   15,   16,   15,    0,   15,   15,
        0,    0,    7,    9,    9,    0,    9,    9,    9,   15,
       15,    0,   15,   15,   15,    0,    0,    0,    0,    0,
        9,    9,    0,    9,    0,    9,    0,    9,    9,    9,
        0,    9,   15,   15,    0,   15,    0,   15,    0,   15,

       15,   15,    0,   15,    0,    0,    0,    0,    0,    2,
        9,    0,    9,    0,    9,    0,    9,    0,    9,    9,
        9,    9,    9,    9,    9,    9,    0,   15,    0,   15,
        0,   15,    0,   15,    0,   15,   15,   15,   15,   15,
       15,   15,   15,    0,    0,    0,    0,    0,    0,    0,
        0,    9,    0,    9,    0,    9,    0,    9,    9,    9,
        9,    9,    9,    0,    9,    9,    9,    0,    9,    9,
        9,    9,    9,    9,    0,   15,    0,   15,    0,   15,
        0,   15,   15,   15,   15,   15,   15,    0,   15,   15,
       15,    0,   15,   15,   15,   15,   15,   15,    0,    0,

        0,    0,    0,    0,    0,    0,    9,    9,    9,    9,
        0,    0,    9,    9,    9,    9,    9,    0,    0,   15,
       15,   15,   15,    0,    0,   15,   15,   15,   15,   15,
        5,    0,    0,    0,    0,    2,    9,    9,    9,    9,
        9,    9,    9,    9,   15,   15,   15,   15,   15,   15,
       15,   15,    0,    0,    0,    0,    6,    9,    9,    9,
        9,    9,    9,    9,    9,   15,   15,   15,   15,   15,
       15,   15,   15,    0,    3,    0,    0,    9,    9,    9,
        9,    9,    9,    9,    9,   15,   15,   15,   15,   15,
       15,   15,   15,    5,    4,    0,    9,    9,    9,    9,

        9,    9,    9,    9,   15,   15,   15,   15,   15,   15,
       15,   15,    6,    9,    9,    9,    9,    9,    9,    9,
       15,   15,   15,   15,   15,   15,   15,    9,    9,    9,
       15,   15,   15,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    9,   15,   16,   17,   18,   19,   20,   21,   22,
       23,   23,   24,   25,   25,   25,   25,   26,   27,    1,
       28,    1,   29,   30,   31,   31,   32,   33,   31,   31,
       34,   34,   34,   34,   34,   35,   34,   34,   34,   34,
       36,   37,   34,   34,   38,   34,   34,   34,   34,   34,
       39,    1,   40,    1,   41,    1,   31,   31,   31,   42,

       31,   31,   34,   34,   34,   34,   34,   43,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   44,   34,   34,
       34,   34,    1,    1,    1,   45,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[46] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    3,    2,    2,
        2,    4,    1,    5,    6,    7,    6,    6,    2,    8,
        8,    8,    8,    8,    8,    6,    2,    9,    2,    2,
       10,   10,   10,   11,   11,   11,   11,   11,    1,   12,
        4,   10,   11,   11,    2
    } ;

static yyconst flex_int16_t yy_base[412] =
    {   0,
        0,   32,   65,    0,  110,    0,  154,  171,  387, 2274,
        4, 2274,  383,    4,  330,  336,   10,   11,  342,  361,
     2274,  339,  333,    0,  326,  178, 2274,  340, 2274, 2274,
        6,   24,  208, 2274, 2274,   48,   14, 2274,   35, 2274,
       37,  303,  306,   49,  338, 2274,  335, 2274,   39,    0,
      310,  238,  274,  321, 2274,  140,    0,  301,  293,  329,
      145,    0, 2274,  354,  379,    0,    0,  404,  429,  454,
      479,    0,    0,  504,  529,  130,  283,  268,  274,  252,
      554,  579,    0,    0,    0,  604,    0,    0,  629,  669,
        0,    0,  694,  719,    0,    0,    0,  744,    0,    0,

      769,  809,    0,    0,  252,    0,  251,    0,  252,  274,
      834,    0,    0,    0,  859,    0,  177,    0,  185,  884,
      897,  191,  207,  215,  917,  957,    0,  997,    0,    0,
        0, 1022,    0,  221,    0,  237, 1047, 1060,  245,  251,
      274, 1080, 1120,    0,    0,  241,    0,  238,  238,    0,
        0, 1160,    0,    0,    0, 1185,    0,    0,  292,  300,
      308,  329, 1197,    0,    0,    0,  354,    0,  379, 1205,
      404,  429,  454, 1212,    0, 1232,    0,    0,    0, 1257,
        0,    0,  479,  503,  528,  554, 1269,    0,    0,    0,
      579,    0,  604, 1277,  669,  694,  719, 1284,  223,  239,

      211,  235,    0,  233,    0,    0,  215, 1292,  744,  809,
        0,    0,  834,  858,  883,  997,    0,    0,    0,  204,
     1300, 1022, 1047,    0,    0, 1160, 1184, 1231, 1257,    0,
      208,    0,  205,    0,  177, 2274, 1306, 1312, 1318, 1324,
      185, 1332, 1338, 1344, 1350, 1356, 1362, 1368,  174, 1376,
     1382, 1388,    0,  177,    0,  174,  173,  167, 1396, 1402,
     1408, 1414, 1420, 1426, 1432,  163, 1440, 1446, 1452, 1458,
     1464, 1470, 1476,  166, 2274,  165,    0, 1482, 1488, 1494,
     1500,  153, 1508, 1514, 1520, 1526, 1532, 1538, 1544,  150,
     1552, 1558, 1564, 2274, 2274,   43,   38, 1570, 1576, 1582,

     1588, 1594, 1600, 1606,   34, 1612, 1618, 1624, 1630, 1636,
     1642, 1648, 2274, 1654, 1660, 1666,   14, 1672, 1678, 1684,
     1690, 1696, 1702,    1, 1708, 1714, 1720, 1726, 1732, 1738,
     1744, 1750, 1756, 2274, 1781, 1793, 1805, 1810, 1816, 1827,
     1836, 1844, 1850, 1860, 1868, 1874, 1884, 1895, 1905, 1909,
     1918, 1928, 1938, 1942, 1951, 1961, 1971, 1975, 1978, 1981,
     1984, 1993, 1997, 2000, 2003, 2006, 2016, 2027, 2031, 2034,
     2043, 2047, 2050, 2059, 2063, 2066, 2069, 2078, 2082, 2085,
     2094, 2098, 2108, 2119, 2130, 2135, 2138, 2141, 2144, 2147,
     2150, 2153, 2156, 2159, 2162, 2165, 2168, 2178, 2182, 2185,

     2188, 2191, 2194, 2197, 2200, 2203, 2213, 2225, 2237, 2249,
     2261
    } ;

static yyconst flex_int16_t yy_def[412] =
    {   0,
      335,  335,  334,    3,  334,    5,  335,  335,  334,  334,
      334,  334,  334,  336,  334,  334,  334,  334,  334,  337,
      334,  334,  338,  334,  334,  339,  334,  340,  334,  334,
      334,  334,  341,  334,  334,  334,  336,  334,  336,  334,
      336,  334,  334,  334,  334,  334,  337,  334,  334,  342,
      343,  339,  344,  340,  334,  334,  345,  346,  341,  347,
      334,  348,  334,  344,  349,  350,   64,  351,  352,  347,
      353,  354,   70,  355,  356,  334,  334,  334,  334,  348,
      357,  349,  358,   82,  359,  351,  360,   86,  334,  352,
      361,   90,  362,  353,  363,   94,  364,  355,  365,   98,

      334,  356,  366,  102,  334,  367,  334,  368,  334,  334,
      357,  369,  111,  370,  371,  372,   89,  373,   89,  374,
       89,  121,  121,  121,  334,  334,  375,  362,  376,  128,
      377,  378,  379,  101,  380,  101,  381,  101,  138,  138,
      138,  334,  334,  382,  383,  367,  384,  368,  334,  385,
      386,  371,  387,  152,  388,  374,  389,  156,   89,   89,
       89,  121,  125,  390,  163,  125,  126,  391,  126,  126,
      170,  170,  170,  152,  392,  378,  393,  176,  394,  381,
      395,  180,  101,  101,  101,  138,  142,  396,  187,  142,
      143,  397,  143,  143,  194,  194,  194,  176,  383,  334,

      384,  334,  398,  385,  399,  400,  121,  121,  208,  208,
      401,  402,  126,  126,  126,  170,  174,  403,  404,  138,
      138,  221,  221,  405,  406,  143,  143,  143,  194,  198,
      334,  407,  334,  408,  398,  334,   89,  208,  208,  208,
      170,  170,  242,  242,  101,  221,  221,  221,  194,  194,
      250,  250,  409,  407,  410,  408,  334,  121,  121,  259,
      259,  126,  242,  242,  242,  138,  138,  267,  267,  143,
      250,  250,  250,  409,  334,  410,  411,   89,  259,  259,
      259,  170,  170,  283,  283,  101,  267,  267,  267,  194,
      194,  291,  291,  334,  334,  411,  121,   89,   89,   89,

      126,  283,  283,  283,  138,  101,  101,  101,  143,  291,
      291,  291,  334,   89,   89,   89,  170,  126,  126,  126,
      101,  101,  101,  194,  143,  143,  143,  126,  126,  126,
      143,  143,  143,    0,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334
    } ;

static yyconst flex_int16_t yy_nxt[2320] =
    {   0,
      334,   11,   12,   13,   11,   36,   40,   41,   36,   14,
       15,   44,   44,   37,   44,   44,   40,   41,  193,   49,
       49,   49,   49,   49,   49,   56,   56,   56,   56,   56,
       56,  169,   16,   11,   12,   13,   11,   40,   41,   40,
       41,   14,   15,   56,   56,   56,   56,   56,   56,   36,
       44,  136,   36,   44,   45,  119,  313,   37,   49,   49,
       49,   49,   49,   49,   16,   10,   17,   12,   13,   18,
       19,   20,   10,   10,   10,   10,   10,   21,   21,   22,
       21,   23,   10,   10,   24,   24,   24,   24,   24,   24,
       10,   21,   25,   10,   10,   26,   26,   26,   26,   26,

       26,   26,   26,   21,   27,   21,   26,   26,   26,   10,
       10,   17,   12,   13,   17,   10,   28,   10,   10,   10,
       10,   10,   10,   29,   10,   30,   31,   10,   10,   32,
       32,   32,   32,   32,   32,   10,   10,   10,   10,   10,
       33,   33,   33,   33,   33,   33,   33,   33,   10,   10,
       30,   33,   33,   33,   10,   17,   12,   13,   17,   56,
       56,   56,   56,   56,   56,  105,   34,  309,  106,   35,
      301,   35,   17,   12,   13,   17,   76,   77,  295,  294,
      286,   78,   79,   34,  278,  277,   35,  275,   35,   50,
      275,  270,   51,   51,   51,   51,  119,  119,  119,  119,

      119,  119,  262,   53,  119,  119,  119,  119,  119,  119,
      160,  160,  160,  160,  160,  160,  257,  255,   50,   57,
      253,  245,   58,   58,   58,   58,  161,  161,  161,  161,
      162,  121,  237,   60,  121,  121,  121,  121,  121,  121,
      136,  136,  136,  136,  136,  136,  236,  234,   57,   50,
      233,  232,   51,   51,   51,   51,  136,  136,  136,  136,
      136,  136,  231,   53,  184,  184,  184,  184,  184,  184,
      185,  185,  185,  185,  186,  138,  203,  202,   50,   64,
      200,   65,   64,   66,   64,   64,  150,  149,   64,  147,
      145,  110,   68,  138,  138,  138,  138,  138,  138,   64,

       64,   64,   69,   64,   57,  109,  108,   58,   58,   58,
       58,  207,  208,  209,  210,  210,  210,  159,   60,  107,
      121,  121,  121,  121,  121,  159,   60,   55,  121,  121,
      121,  121,  121,   57,   70,   53,   71,   70,   72,   70,
       70,   46,   63,   70,   62,   61,   55,   74,  121,  121,
      121,  121,  121,   46,   70,   70,   70,   75,   70,   64,
       48,   65,   64,   66,   64,   64,   48,   46,   64,   46,
       43,   42,   81,  169,  169,  169,  169,  169,  169,   64,
       64,   64,   69,   64,   82,   38,  334,   82,   83,   82,
       82,  334,  334,   82,  334,  334,  334,   82,  169,  169,

      169,  169,  169,  169,   82,   82,   82,   82,   82,   86,
      334,   65,   86,   87,   86,   86,  334,  334,   86,  334,
      334,  334,   89,  214,  214,  214,  214,  214,  214,   86,
       86,   86,   69,   86,   90,  334,   65,   90,   91,   90,
       90,  334,  334,   90,  334,  334,  334,   90,  215,  215,
      215,  215,  216,  170,   90,   90,   90,   90,   90,   70,
      334,   71,   70,   72,   70,   70,  334,  334,   70,  334,
      334,  334,   93,  170,  170,  170,  170,  170,  170,   70,
       70,   70,   75,   70,   94,  334,  334,   94,   95,   94,
       94,  334,  334,   94,  334,  334,  334,   94,  220,  221,

      222,  223,  223,  223,   94,   94,   94,   94,   94,   98,
      334,   71,   98,   99,   98,   98,  334,  334,   98,  334,
      183,  334,  101,  138,  138,  138,  138,  138,  334,   98,
       98,   98,   75,   98,  102,  334,   71,  102,  103,  102,
      102,  334,  334,  102,  334,  183,  334,  102,  138,  138,
      138,  138,  138,  334,  102,  102,  102,  102,  102,  111,
      334,   65,  111,  112,  111,  111,  334,  334,  111,  334,
      334,  334,   81,  138,  138,  138,  138,  138,  334,  111,
      111,  111,   69,  111,   82,  334,  334,   82,   83,   82,
       82,  334,  334,   82,  334,  334,  334,   82,  193,  193,

      193,  193,  193,  193,   82,   82,   82,   82,   82,   86,
      334,   65,   86,   87,   86,   86,  334,  334,   86,  334,
      334,  334,  115,  193,  193,  193,  193,  193,  193,   86,
       86,   86,   69,   86,  117,  334,   65,  117,  118,  117,
      117,  334,  334,  117,  334,  119,  119,  120,  121,  122,
      123,  124,  124,  124,  125,  117,  117,   69,  126,  119,
      119,  119,  119,  119,  119,  119,  119,  334,  334,  119,
      119,  119,  119,  119,   90,  334,   65,   90,   91,   90,
       90,  334,  334,   90,  334,  334,  334,   90,  227,  227,
      227,  227,  227,  227,   90,   90,   90,   90,   90,  128,

      334,   71,  128,  129,  128,  128,  334,  334,  128,  334,
      334,  334,   93,  228,  228,  228,  228,  229,  194,  128,
      128,  128,   75,  128,   94,  334,  334,   94,   95,   94,
       94,  334,  334,   94,  334,  334,  334,   94,  194,  194,
      194,  194,  194,  194,   94,   94,   94,   94,   94,   98,
      334,   71,   98,   99,   98,   98,  334,  334,   98,  334,
      334,  334,  132,  239,  239,  239,  239,  240,  207,   98,
       98,   98,   75,   98,  134,  334,   71,  134,  135,  134,
      134,  334,  334,  134,  334,  136,  136,  137,  138,  139,
      140,  141,  141,  141,  142,  134,  134,   75,  143,  136,

      136,  136,  136,  136,  136,  136,  136,  334,  334,  136,
      136,  136,  136,  136,  102,  334,   71,  102,  103,  102,
      102,  334,  334,  102,  334,  334,  334,  102,  207,  207,
      207,  207,  207,  207,  102,  102,  102,  102,  102,  111,
      334,   65,  111,  112,  111,  111,  334,  334,  111,  334,
      334,  334,   81,  241,  242,  243,  244,  244,  244,  111,
      111,  111,   69,  111,  152,  334,   65,  152,  153,  152,
      152,  334,  334,  152,  334,  213,  334,  115,  170,  170,
      170,  170,  170,  334,  152,  152,  152,   69,  152,  156,
      334,   65,  156,  157,  156,  156,  334,  334,  156,  334,

      213,  334,  120,  170,  170,  170,  170,  170,  334,  156,
      156,  156,   69,  156,  159,  334,  119,  119,  119,  119,
      119,  119,  163,  334,   65,  163,  164,  163,  163,  334,
      334,  163,  334,  165,  165,  120,  166,  166,  166,  166,
      166,  166,  163,  163,  163,   69,  126,  165,  165,  165,
      165,  165,  165,  165,  165,  334,  334,  165,  165,  165,
      165,  165,  167,  334,   65,  167,  168,  167,  167,  334,
      334,  167,  334,  169,  169,  120,  170,  171,  172,  173,
      173,  173,  174,  167,  167,   69,  152,  169,  169,  169,
      169,  169,  169,  169,  169,  334,  334,  169,  169,  169,

      169,  169,  128,  334,   71,  128,  129,  128,  128,  334,
      334,  128,  334,  334,  334,   93,  170,  170,  170,  170,
      170,  334,  128,  128,  128,   75,  128,  176,  334,   71,
      176,  177,  176,  176,  334,  334,  176,  334,  334,  334,
      132,  247,  247,  247,  247,  248,  220,  176,  176,  176,
       75,  176,  180,  334,   71,  180,  181,  180,  180,  334,
      334,  180,  334,  334,  334,  137,  220,  220,  220,  220,
      220,  220,  180,  180,  180,   75,  180,  183,  334,  136,
      136,  136,  136,  136,  136,  187,  334,   71,  187,  188,
      187,  187,  334,  334,  187,  334,  189,  189,  137,  190,

      190,  190,  190,  190,  190,  187,  187,  187,   75,  143,
      189,  189,  189,  189,  189,  189,  189,  189,  334,  334,
      189,  189,  189,  189,  189,  191,  334,   71,  191,  192,
      191,  191,  334,  334,  191,  334,  193,  193,  137,  194,
      195,  196,  197,  197,  197,  198,  191,  191,   75,  176,
      193,  193,  193,  193,  193,  193,  193,  193,  334,  334,
      193,  193,  193,  193,  193,  152,  334,   65,  152,  153,
      152,  152,  334,  334,  152,  334,  334,  334,  115,  249,
      250,  251,  252,  252,  252,  152,  152,  152,   69,  152,
      156,  334,   65,  156,  157,  156,  156,  334,  334,  156,

      334,  226,  334,  120,  194,  194,  194,  194,  194,  334,
      156,  156,  156,   69,  156,  115,  165,  165,  165,  165,
      165,  165,  213,  334,  169,  169,  169,  169,  169,  169,
      120,  217,  217,  217,  217,  217,  217,  176,  334,   71,
      176,  177,  176,  176,  334,  334,  176,  334,  226,  334,
      132,  194,  194,  194,  194,  194,  334,  176,  176,  176,
       75,  176,  180,  334,   71,  180,  181,  180,  180,  334,
      334,  180,  334,  334,  334,  137,  194,  194,  194,  194,
      194,  334,  180,  180,  180,   75,  180,  132,  189,  189,
      189,  189,  189,  189,  226,  334,  193,  193,  193,  193,

      193,  193,  137,  230,  230,  230,  230,  230,  230,  237,
      334,  238,  238,  238,  238,  238,  238,  245,  334,  246,
      246,  246,  246,  246,  246,  258,  259,  260,  261,  261,
      261,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  119,  262,
      334,  263,  263,  263,  263,  263,  263,  264,  264,  264,
      264,  265,  241,  241,  241,  241,  241,  241,  241,  266,
      267,  268,  269,  269,  269,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  136,  270,  334,  271,  271,  271,  271,  271,

      271,  272,  272,  272,  272,  273,  249,  249,  249,  249,
      249,  249,  249,  278,  334,  279,  279,  279,  279,  279,
      279,  280,  280,  280,  280,  281,  258,  258,  258,  258,
      258,  258,  258,  282,  283,  284,  285,  285,  285,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  169,  286,  334,  287,
      287,  287,  287,  287,  287,  288,  288,  288,  288,  289,
      266,  266,  266,  266,  266,  266,  266,  290,  291,  292,
      293,  293,  293,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,

      193,  297,  298,  299,  300,  300,  300,  258,  258,  258,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  119,  301,  334,  302,  302,  302,
      302,  302,  302,  303,  303,  303,  303,  304,  282,  282,
      282,  282,  282,  282,  282,  305,  306,  307,  308,  308,
      308,  266,  266,  266,  266,  266,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  266,  266,  266,  136,  309,
      334,  310,  310,  310,  310,  310,  310,  311,  311,  311,
      311,  312,  290,  290,  290,  290,  290,  290,  290,  314,
      314,  314,  314,  314,  314,  315,  315,  315,  315,  316,

      297,  297,  297,  297,  297,  297,  297,  317,  318,  319,
      320,  320,  320,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      169,  321,  321,  321,  321,  321,  321,  322,  322,  322,
      322,  323,  305,  305,  305,  305,  305,  305,  305,  324,
      325,  326,  327,  327,  327,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  290,  290,  290,
      290,  290,  193,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  297,  297,  297,  297,  297,  297,  297,  297,
      119,  328,  328,  328,  328,  328,  328,  329,  329,  329,

      329,  330,  317,  317,  317,  317,  317,  317,  317,  305,
      305,  305,  305,  305,  305,  305,  305,  305,  305,  305,
      305,  305,  305,  305,  305,  305,  136,  331,  331,  331,
      331,  331,  331,  332,  332,  332,  332,  333,  324,  324,
      324,  324,  324,  324,  324,  317,  317,  317,  317,  317,
      317,  317,  317,  317,  317,  317,  317,  317,  317,  317,
      317,  317,  169,  324,  324,  324,  324,  324,  324,  324,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
      193,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   39,   47,   47,   47,   47,   47,
       47,   47,   47,   47,   47,   47,   47,   49,   49,   52,
      334,   52,   52,   52,  334,   52,   52,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   59,
      334,   59,   59,   59,  334,   59,   59,   50,  334,  334,
      334,   50,  334,   50,   50,   51,   51,   51,  334,   51,
       51,   67,   67,   67,  334,   67,  334,   67,   67,   67,
       67,   57,  334,  334,  334,   57,  334,   57,   57,   58,
       58,   58,  334,   58,   58,   73,   73,   73,  334,   73,
      334,   73,   73,   73,   73,   80,   80,   80,   80,   80,

       80,   80,   80,   80,   80,   80,   84,  334,   84,  334,
       84,  334,   84,   84,   84,   84,   85,  334,   85,   88,
       88,   88,  334,   88,  334,   88,   88,   88,   88,   92,
       92,   92,  334,   92,  334,   92,   92,   92,   92,   96,
      334,   96,  334,   96,  334,   96,   96,   96,   96,   97,
      334,   97,  100,  100,  100,  334,  100,  334,  100,  100,
      100,  100,  104,  104,  104,  334,  104,  334,  104,  104,
      104,  104,  113,  113,  113,  334,  113,  334,  113,  113,
      113,  113,  114,  334,  114,   64,  334,   64,  116,  334,
      116,  127,  334,  127,  130,  130,  130,  334,  130,  334,

      130,  130,  130,  130,  131,  334,  131,   70,  334,   70,
      133,  334,  133,  144,  334,  144,  146,  146,  146,  146,
      146,  146,  146,  146,  146,  146,  146,  148,  148,  148,
      148,  148,  148,  148,  148,  148,  148,  148,  151,  334,
      151,   82,  334,   82,  154,  154,  154,  334,  154,  334,
      154,  154,  154,  154,   86,  334,   86,  155,  334,  155,
      158,  158,  158,  334,  158,  334,  158,  158,  158,  158,
       90,  334,   90,  175,  334,  175,   94,  334,   94,  178,
      178,  178,  334,  178,  334,  178,  178,  178,  178,   98,
      334,   98,  179,  334,  179,  182,  182,  182,  334,  182,

      334,  182,  182,  182,  182,  102,  334,  102,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      204,  204,  204,  204,  334,  204,  204,  204,  204,  204,
      204,  204,  111,  334,  111,  205,  334,  205,  117,  334,
      117,  206,  334,  206,  211,  334,  211,  212,  334,  212,
      128,  334,  128,  218,  334,  218,  134,  334,  134,  219,
      334,  219,  224,  334,  224,  225,  334,  225,  235,  235,
      235,  235,  235,  235,  235,  235,  235,  235,  235,  152,
      334,  152,  156,  334,  156,  163,  334,  163,  167,  334,

      167,  176,  334,  176,  180,  334,  180,  187,  334,  187,
      191,  334,  191,  254,  254,  254,  254,  334,  254,  254,
      254,  254,  254,  254,  254,  256,  256,  256,  256,  334,
      256,  256,  256,  256,  256,  256,  256,  274,  274,  274,
      274,  334,  274,  274,  274,  274,  274,  274,  274,  276,
      276,  276,  276,  334,  276,  276,  276,  276,  276,  276,
      276,  296,  296,  296,  296,  334,  296,  296,  296,  296,
      296,  296,  296,    9,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334
    } ;

static yyconst flex_int16_t yy_chk[2320] =
    {   0,
        0,    1,    1,    1,    1,   11,   14,   14,   11,    1,
        1,   17,   18,   11,   17,   18,   37,   37,  324,   24,
       24,   24,   24,   24,   24,   31,   31,   31,   31,   31,
       31,  317,    1,    2,    2,    2,    2,   39,   39,   41,
       41,    2,    2,   32,   32,   32,   32,   32,   32,   36,
       44,  305,   36,   44,   18,  297,  296,   36,   49,   49,
       49,   49,   49,   49,    2,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    7,    7,    7,    7,   56,
       56,   56,   56,   56,   56,   76,    7,  290,   76,    7,
      282,    7,    8,    8,    8,    8,   61,   61,  276,  274,
      266,   61,   61,    8,  258,  257,    8,  256,    8,   26,
      254,  249,   26,   26,   26,   26,  117,  117,  117,  117,

      117,  117,  241,   26,  119,  119,  119,  119,  119,  119,
      122,  122,  122,  122,  122,  122,  235,  233,   26,   33,
      231,  220,   33,   33,   33,   33,  123,  123,  123,  123,
      123,  123,  207,   33,  124,  124,  124,  124,  124,  124,
      134,  134,  134,  134,  134,  134,  204,  202,   33,   52,
      201,  200,   52,   52,   52,   52,  136,  136,  136,  136,
      136,  136,  199,   52,  139,  139,  139,  139,  139,  139,
      140,  140,  140,  140,  140,  140,  149,  148,   52,   53,
      146,   53,   53,   53,   53,   53,  110,  109,   53,  107,
      105,   80,   53,  141,  141,  141,  141,  141,  141,   53,

       53,   53,   53,   53,   59,   79,   78,   59,   59,   59,
       59,  159,  159,  159,  159,  159,  159,  160,   59,   77,
      160,  160,  160,  160,  160,  161,   58,   54,  161,  161,
      161,  161,  161,   59,   60,   51,   60,   60,   60,   60,
       60,   47,   45,   60,   43,   42,   28,   60,  162,  162,
      162,  162,  162,   25,   60,   60,   60,   60,   60,   64,
       23,   64,   64,   64,   64,   64,   22,   20,   64,   19,
       16,   15,   64,  167,  167,  167,  167,  167,  167,   64,
       64,   64,   64,   64,   65,   13,    9,   65,   65,   65,
       65,    0,    0,   65,    0,    0,    0,   65,  169,  169,

      169,  169,  169,  169,   65,   65,   65,   65,   65,   68,
        0,   68,   68,   68,   68,   68,    0,    0,   68,    0,
        0,    0,   68,  171,  171,  171,  171,  171,  171,   68,
       68,   68,   68,   68,   69,    0,   69,   69,   69,   69,
       69,    0,    0,   69,    0,    0,    0,   69,  172,  172,
      172,  172,  172,  172,   69,   69,   69,   69,   69,   70,
        0,   70,   70,   70,   70,   70,    0,    0,   70,    0,
        0,    0,   70,  173,  173,  173,  173,  173,  173,   70,
       70,   70,   70,   70,   71,    0,    0,   71,   71,   71,
       71,    0,    0,   71,    0,    0,    0,   71,  183,  183,

      183,  183,  183,  183,   71,   71,   71,   71,   71,   74,
        0,   74,   74,   74,   74,   74,    0,    0,   74,    0,
      184,    0,   74,  184,  184,  184,  184,  184,    0,   74,
       74,   74,   74,   74,   75,    0,   75,   75,   75,   75,
       75,    0,    0,   75,    0,  185,    0,   75,  185,  185,
      185,  185,  185,    0,   75,   75,   75,   75,   75,   81,
        0,   81,   81,   81,   81,   81,    0,    0,   81,    0,
        0,    0,   81,  186,  186,  186,  186,  186,    0,   81,
       81,   81,   81,   81,   82,    0,    0,   82,   82,   82,
       82,    0,    0,   82,    0,    0,    0,   82,  191,  191,

      191,  191,  191,  191,   82,   82,   82,   82,   82,   86,
        0,   86,   86,   86,   86,   86,    0,    0,   86,    0,
        0,    0,   86,  193,  193,  193,  193,  193,  193,   86,
       86,   86,   86,   86,   89,    0,   89,   89,   89,   89,
       89,    0,    0,   89,    0,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,    0,    0,   89,
       89,   89,   89,   89,   90,    0,   90,   90,   90,   90,
       90,    0,    0,   90,    0,    0,    0,   90,  195,  195,
      195,  195,  195,  195,   90,   90,   90,   90,   90,   93,

        0,   93,   93,   93,   93,   93,    0,    0,   93,    0,
        0,    0,   93,  196,  196,  196,  196,  196,  196,   93,
       93,   93,   93,   93,   94,    0,    0,   94,   94,   94,
       94,    0,    0,   94,    0,    0,    0,   94,  197,  197,
      197,  197,  197,  197,   94,   94,   94,   94,   94,   98,
        0,   98,   98,   98,   98,   98,    0,    0,   98,    0,
        0,    0,   98,  209,  209,  209,  209,  209,  209,   98,
       98,   98,   98,   98,  101,    0,  101,  101,  101,  101,
      101,    0,    0,  101,    0,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,

      101,  101,  101,  101,  101,  101,  101,    0,    0,  101,
      101,  101,  101,  101,  102,    0,  102,  102,  102,  102,
      102,    0,    0,  102,    0,    0,    0,  102,  210,  210,
      210,  210,  210,  210,  102,  102,  102,  102,  102,  111,
        0,  111,  111,  111,  111,  111,    0,    0,  111,    0,
        0,    0,  111,  213,  213,  213,  213,  213,  213,  111,
      111,  111,  111,  111,  115,    0,  115,  115,  115,  115,
      115,    0,    0,  115,    0,  214,    0,  115,  214,  214,
      214,  214,  214,    0,  115,  115,  115,  115,  115,  120,
        0,  120,  120,  120,  120,  120,    0,    0,  120,    0,

      215,    0,  120,  215,  215,  215,  215,  215,    0,  120,
      120,  120,  120,  120,  121,    0,  121,  121,  121,  121,
      121,  121,  125,    0,  125,  125,  125,  125,  125,    0,
        0,  125,    0,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,    0,    0,  125,  125,  125,
      125,  125,  126,    0,  126,  126,  126,  126,  126,    0,
        0,  126,    0,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  126,  126,    0,    0,  126,  126,  126,

      126,  126,  128,    0,  128,  128,  128,  128,  128,    0,
        0,  128,    0,    0,    0,  128,  216,  216,  216,  216,
      216,    0,  128,  128,  128,  128,  128,  132,    0,  132,
      132,  132,  132,  132,    0,    0,  132,    0,    0,    0,
      132,  222,  222,  222,  222,  222,  222,  132,  132,  132,
      132,  132,  137,    0,  137,  137,  137,  137,  137,    0,
        0,  137,    0,    0,    0,  137,  223,  223,  223,  223,
      223,  223,  137,  137,  137,  137,  137,  138,    0,  138,
      138,  138,  138,  138,  138,  142,    0,  142,  142,  142,
      142,  142,    0,    0,  142,    0,  142,  142,  142,  142,

      142,  142,  142,  142,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  142,  142,  142,    0,    0,
      142,  142,  142,  142,  142,  143,    0,  143,  143,  143,
      143,  143,    0,    0,  143,    0,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,    0,    0,
      143,  143,  143,  143,  143,  152,    0,  152,  152,  152,
      152,  152,    0,    0,  152,    0,    0,    0,  152,  226,
      226,  226,  226,  226,  226,  152,  152,  152,  152,  152,
      156,    0,  156,  156,  156,  156,  156,    0,    0,  156,

        0,  227,    0,  156,  227,  227,  227,  227,  227,    0,
      156,  156,  156,  156,  156,  163,  163,  163,  163,  163,
      163,  163,  170,    0,  170,  170,  170,  170,  170,  170,
      174,  174,  174,  174,  174,  174,  174,  176,    0,  176,
      176,  176,  176,  176,    0,    0,  176,    0,  228,    0,
      176,  228,  228,  228,  228,  228,    0,  176,  176,  176,
      176,  176,  180,    0,  180,  180,  180,  180,  180,    0,
        0,  180,    0,    0,    0,  180,  229,  229,  229,  229,
      229,    0,  180,  180,  180,  180,  180,  187,  187,  187,
      187,  187,  187,  187,  194,    0,  194,  194,  194,  194,

      194,  194,  198,  198,  198,  198,  198,  198,  198,  208,
        0,  208,  208,  208,  208,  208,  208,  221,    0,  221,
      221,  221,  221,  221,  221,  237,  237,  237,  237,  237,
      237,  238,  238,  238,  238,  238,  238,  239,  239,  239,
      239,  239,  239,  240,  240,  240,  240,  240,  240,  242,
        0,  242,  242,  242,  242,  242,  242,  243,  243,  243,
      243,  243,  243,  244,  244,  244,  244,  244,  244,  245,
      245,  245,  245,  245,  245,  246,  246,  246,  246,  246,
      246,  247,  247,  247,  247,  247,  247,  248,  248,  248,
      248,  248,  248,  250,    0,  250,  250,  250,  250,  250,

      250,  251,  251,  251,  251,  251,  251,  252,  252,  252,
      252,  252,  252,  259,    0,  259,  259,  259,  259,  259,
      259,  260,  260,  260,  260,  260,  260,  261,  261,  261,
      261,  261,  261,  262,  262,  262,  262,  262,  262,  263,
      263,  263,  263,  263,  263,  264,  264,  264,  264,  264,
      264,  265,  265,  265,  265,  265,  265,  267,    0,  267,
      267,  267,  267,  267,  267,  268,  268,  268,  268,  268,
      268,  269,  269,  269,  269,  269,  269,  270,  270,  270,
      270,  270,  270,  271,  271,  271,  271,  271,  271,  272,
      272,  272,  272,  272,  272,  273,  273,  273,  273,  273,

      273,  278,  278,  278,  278,  278,  278,  279,  279,  279,
      279,  279,  279,  280,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  281,  283,    0,  283,  283,  283,
      283,  283,  283,  284,  284,  284,  284,  284,  284,  285,
      285,  285,  285,  285,  285,  286,  286,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  287,  288,  288,  288,
      288,  288,  288,  289,  289,  289,  289,  289,  289,  291,
        0,  291,  291,  291,  291,  291,  291,  292,  292,  292,
      292,  292,  292,  293,  293,  293,  293,  293,  293,  298,
      298,  298,  298,  298,  298,  299,  299,  299,  299,  299,

      299,  300,  300,  300,  300,  300,  300,  301,  301,  301,
      301,  301,  301,  302,  302,  302,  302,  302,  302,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  306,  306,  306,  306,  306,  306,  307,  307,  307,
      307,  307,  307,  308,  308,  308,  308,  308,  308,  309,
      309,  309,  309,  309,  309,  310,  310,  310,  310,  310,
      310,  311,  311,  311,  311,  311,  311,  312,  312,  312,
      312,  312,  312,  314,  314,  314,  314,  314,  314,  315,
      315,  315,  315,  315,  315,  316,  316,  316,  316,  316,
      316,  318,  318,  318,  318,  318,  318,  319,  319,  319,

      319,  319,  319,  320,  320,  320,  320,  320,  320,  321,
      321,  321,  321,  321,  321,  322,  322,  322,  322,  322,
      322,  323,  323,  323,  323,  323,  323,  325,  325,  325,
      325,  325,  325,  326,  326,  326,  326,  326,  326,  327,
      327,  327,  327,  327,  327,  328,  328,  328,  328,  328,
      328,  329,  329,  329,  329,  329,  329,  330,  330,  330,
      330,  330,  330,  331,  331,  331,  331,  331,  331,  332,
      332,  332,  332,  332,  332,  333,  333,  333,  333,  333,
      333,  335,  335,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336,  336,  337,  337,  337,  337,  337,
      337,  337,  337,  337,  337,  337,  337,  338,  338,  339,
        0,  339,  339,  339,    0,  339,  339,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  341,
        0,  341,  341,  341,    0,  341,  341,  342,    0,    0,
        0,  342,    0,  342,  342,  343,  343,  343,    0,  343,
      343,  344,  344,  344,    0,  344,    0,  344,  344,  344,
      344,  345,    0,    0,    0,  345,    0,  345,  345,  346,
      346,  346,    0,  346,  346,  347,  347,  347,    0,  347,
        0,  347,  347,  347,  347,  348,  348,  348,  348,  348,

      348,  348,  348,  348,  348,  348,  349,    0,  349,    0,
      349,    0,  349,  349,  349,  349,  350,    0,  350,  351,
      351,  351,    0,  351,    0,  351,  351,  351,  351,  352,
      352,  352,    0,  352,    0,  352,  352,  352,  352,  353,
        0,  353,    0,  353,    0,  353,  353,  353,  353,  354,
        0,  354,  355,  355,  355,    0,  355,    0,  355,  355,
      355,  355,  356,  356,  356,    0,  356,    0,  356,  356,
      356,  356,  357,  357,  357,    0,  357,    0,  357,  357,
      357,  357,  358,    0,  358,  359,    0,  359,  360,    0,
      360,  361,    0,  361,  362,  362,  362,    0,  362,    0,

      362,  362,  362,  362,  363,    0,  363,  364,    0,  364,
      365,    0,  365,  366,    0,  366,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  369,    0,
      369,  370,    0,  370,  371,  371,  371,    0,  371,    0,
      371,  371,  371,  371,  372,    0,  372,  373,    0,  373,
      374,  374,  374,    0,  374,    0,  374,  374,  374,  374,
      375,    0,  375,  376,    0,  376,  377,    0,  377,  378,
      378,  378,    0,  378,    0,  378,  378,  378,  378,  379,
        0,  379,  380,    0,  380,  381,  381,  381,    0,  381,

        0,  381,  381,  381,  381,  382,    0,  382,  383,  383,
      383,  383,  383,  383,  383,  383,  383,  383,  383,  384,
      384,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      385,  385,  385,  385,    0,  385,  385,  385,  385,  385,
      385,  385,  386,    0,  386,  387,    0,  387,  388,    0,
      388,  389,    0,  389,  390,    0,  390,  391,    0,  391,
      392,    0,  392,  393,    0,  393,  394,    0,  394,  395,
        0,  395,  396,    0,  396,  397,    0,  397,  398,  398,
      398,  398,  398,  398,  398,  398,  398,  398,  398,  399,
        0,  399,  400,    0,  400,  401,    0,  401,  402,    0,

      402,  403,    0,  403,  404,    0,  404,  405,    0,  405,
      406,    0,  406,  407,  407,  407,  407,    0,  407,  407,
      407,  407,  407,  407,  407,  408,  408,  408,  408,    0,
      408,  408,  408,  408,  408,  408,  408,  409,  409,  409,
      409,    0,  409,  409,  409,  409,  409,  409,  409,  410,
      410,  410,  410,    0,  410,  410,  410,  410,  410,  410,
      410,  411,  411,  411,  411,    0,  411,  411,  411,  411,
      411,  411,  411,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,

      334,  334,  334,  334,  334,  334,  334,  334,  334,  334,
      334,  334,  334,  334,  334,  334,  334,  334,  334
    } ;

static yyconst flex_int16_t yy_rule_linenum[22] =
    {   0,
      134,  136,  142,  149,  156,  162,  173,  177,  181,  186,
      191,  196,  207,  213,  225,  230,  235,  240,  249,  252,
      255
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "HexDLScanner.lpp"
/* dlvhex-dlplugin -- Integration of Answer-Set Programming and Description Logics.
 *
 * Copyright (C) 2005, 2006, 2007  Thomas Krennwallner
 * 
 * This file is part of dlvhex-dlplugin.
 *
 * dlvhex-dlplugin is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * dlvhex-dlplugin is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with dlvhex-dlplugin; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
/**
 * @file   HexDLScanner.lpp
 * @author Thomas Krennwallner
 * @date   Sat Nov  4 15:24:36 2006
 * 
 * @brief  Defines HexDLFlexLexer::yylex() method.
 * 
 * 
 */
#line 34 "HexDLScanner.lpp"
#include "HexDLDriver.h"
#include "HexDLFlexLexer.h"

#include <sstream>

// keep the HexDLRewriterFlexLexer as close as possible to the C version
#define yylval (*(yy::HexDLParser::semantic_type*)lexval)
#define yylloc ((yy::HexDLParser::location_type*)lexloc)
#define driver (*lexdrv)
#line 74 "HexDLScanner.lpp"
// warning: we don't allow one of (), in SUBDELIMS, otw. we can't use
// URI(X) or URI(X,Y) as input query in an cq- or ucq-atom -> you have
// to PCTENCODE URIs with (),

#line 1178 "HexDLScanner.cpp"

#define INITIAL 0
#define dlatominput 1
#define dlatomoutput 2
#define dlatomend 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 119 "HexDLScanner.lpp"



// set begin location to the end location
yylloc->step();



// abbreviate it as token
typedef yy::HexDLParser::token token;



#line 1352 "HexDLScanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 335 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 334 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 22 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 22 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 23 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 134 "HexDLScanner.lpp"
ECHO; yylloc->lines(1);
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 136 "HexDLScanner.lpp"
{
    yyless(2); // throw away "DL" and continue
    BEGIN(dlatominput);
    return token::DLATOM;
  }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 142 "HexDLScanner.lpp"
{
    yylval.sval = new std::string(yytext + 1, 3);
    yyless(4); // throw away "&dl(C|R)" and continue
    BEGIN(dlatominput);
    return token::DLEXTATOM;
  }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 149 "HexDLScanner.lpp"
{
    yylval.sval = new std::string(yytext + 1, 4);
    yyless(5); // throw away "&dlDR" and continue
    BEGIN(dlatominput);
    return token::DLEXTATOM;
  }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 156 "HexDLScanner.lpp"
{
    yyless(5); // throw away "&dlCQ" and continue
    BEGIN(dlatominput);
    return token::CQATOM;
  }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 162 "HexDLScanner.lpp"
{
    yyless(6); // throw away "&dlUCQ" and continue
    BEGIN(dlatominput);
    return token::UCQATOM;
  }
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 173 "HexDLScanner.lpp"
{
    return yy::HexDLParser::token_type('v');
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 177 "HexDLScanner.lpp"
{
    return yy::HexDLParser::token_type(*yytext);
  }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 181 "HexDLScanner.lpp"
{
    yylval.sval = new std::string(yytext);
    return token::STRING;
  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 186 "HexDLScanner.lpp"
{
    std::istringstream(yytext) >> yylval.ival;
    return token::NUMBER; 
  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 191 "HexDLScanner.lpp"
{
    yylval.cval = *yytext;
    return token::PMOP;
  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 196 "HexDLScanner.lpp"
{
    // these symbol may begin a dl-atom output or an dl-atom end
    BEGIN(dlatomend);
    return yy::HexDLParser::token_type(*yytext);
  }
	YY_BREAK


case 13:
YY_RULE_SETUP
#line 207 "HexDLScanner.lpp"
{
    // ok, we have an output, parse that thing
    BEGIN(dlatomoutput);
    return yy::HexDLParser::token_type(*yytext);
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 213 "HexDLScanner.lpp"
{
    // _after_ a dl-atom we can only get a , or a .
    BEGIN(INITIAL);
    yylval.cval = *yytext;
    return token::SENTINEL;
  }
	YY_BREAK


case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 225 "HexDLScanner.lpp"
{
    yylval.sval = new std::string(yytext);
    return token::STRING;
  }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 230 "HexDLScanner.lpp"
{
    std::istringstream(yytext) >> yylval.ival;
    return token::NUMBER; 
  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 235 "HexDLScanner.lpp"
{
    // special chars in an output
    return yy::HexDLParser::token_type(*yytext);
  }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 240 "HexDLScanner.lpp"
{
    // these symbol ends a dl-atom
    BEGIN(dlatomend);
    return yy::HexDLParser::token_type(*yytext);
  }
	YY_BREAK

case 19:
YY_RULE_SETUP
#line 249 "HexDLScanner.lpp"
/* skip blanks */ yylloc->step();
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 252 "HexDLScanner.lpp"
yylloc->lines(1); ECHO;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 255 "HexDLScanner.lpp"
yylloc->step(); ECHO;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 258 "HexDLScanner.lpp"
ECHO;
	YY_BREAK
#line 1648 "HexDLScanner.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(dlatominput):
case YY_STATE_EOF(dlatomoutput):
case YY_STATE_EOF(dlatomend):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyDLfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyDLfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyDLrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyDLrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 335 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 335 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 334);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyDLalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyDLalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyDLfree((void *) b->yy_ch_buf  );

	yyDLfree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

extern "C" int isatty (int );

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyDLalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyDLrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyDLalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyDLrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyDLalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyDLrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyDLfree (void * ptr )
{
	free( (char *) ptr );	/* see yyDLrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 258 "HexDLScanner.lpp"




// Local Variables:
// mode: C++
// End:

