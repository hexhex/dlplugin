/* -*- C++ -*- */

/**
 * @file   RacerAnswerScanner.lpp
 * @author Thomas Krennwallner
 * @date   Fri Mar 17 21:57:18 2006
 * 
 * @brief  Defines RacerFlexLexer::yylex() method.
 * 
 */

%{
#include <iostream>
#include <sstream>
#include <string>

// for yy::location 
#include "RacerAnswerParser.hpp"
#include "RacerAnswerDriver.h"

using namespace std;

// keep the RacerFlexLexer as close as possible to the C version
#define yylval (*(YYSTYPE*)lexval)
#define yylloc ((yy::location*)lexloc)
#define driver (*lexdrv)
%}

%option c++ noyywrap nounput batch debug
%option yyclass="RacerFlexLexer"

NEWLINE         \r?\n
BLANK           [ \t]
NUMBER          (\-)?[0-9]+
STRING          [A-Za-z][A-Za-z0-9_\-\./%]*
QUOTED_STRING   \\\"[^\"]*\\\"

%x racererror raceranswer eatanswerfudge answertrailer

%{
// advance the end location after each tokenizing step
#define YY_USER_ACTION  yylloc->columns(yyleng);
%}

%%

%{
// set begin location to the end location
yylloc->step();
%}


^":error"  BEGIN(racererror); return ERROR;
^":answer" BEGIN(eatanswerfudge); return ANSWER;


<eatanswerfudge>{

  [^\"]*   /* eat non-" chars */ yylloc->step();
  "\""     BEGIN(raceranswer); yylloc->step();

}


<racererror>[^\n]+ { /* get the error message until next \n */
    BEGIN(INITIAL);
    yylval.sval = new std::string(yytext);
    return STRING;
 }


<raceranswer>{

  "NIL\""       BEGIN(answertrailer); return NIL;
  "T\""         BEGIN(answertrailer); return TRUE;
  "\""          BEGIN(answertrailer); yylloc->step();

  [()|#$*?:/]   return *yytext;

  {STRING} {
    yylval.sval = new std::string(yytext);
    return STRING;
  }

  {QUOTED_STRING} {
    yylval.sval = new std::string(yytext + 2, yyleng - 4); // skip \"
    return STRING;
  }

  {NUMBER} {
    std::istringstream(yytext) >> yylval.ival;
    return NUMBER; 
  }

}


<answertrailer>[^\n]+ { /* ignore rest of answer */
  BEGIN(INITIAL);
  yylloc->step();
 }


<*>{BLANK}+       /* skip blanks */ yylloc->step();

{NEWLINE}         yylloc->lines(yyleng); return '\n';

.                 driver.error(*yylloc, "invalid character");

%%

